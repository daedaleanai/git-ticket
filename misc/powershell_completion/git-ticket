using namespace System.Management.Automation
using namespace System.Management.Automation.Language
Register-ArgumentCompleter -Native -CommandName 'git-ticket' -ScriptBlock {
    param($wordToComplete, $commandAst, $cursorPosition)
    $commandElements = $commandAst.CommandElements
    $command = @(
        'git-ticket'
        for ($i = 1; $i -lt $commandElements.Count; $i++) {
            $element = $commandElements[$i]
            if ($element -isnot [StringConstantExpressionAst] -or
                $element.StringConstantType -ne [StringConstantType]::BareWord -or
                $element.Value.StartsWith('-')) {
                break
            }
            $element.Value
        }
    ) -join ';'
    $completions = @(switch ($command) {
        'git-ticket' {
            [CompletionResult]::new('add', 'add', [CompletionResultType]::ParameterValue, 'Create a new ticket.')
            [CompletionResult]::new('assign', 'assign', [CompletionResultType]::ParameterValue, 'Assign a user to a ticket.')
            [CompletionResult]::new('commands', 'commands', [CompletionResultType]::ParameterValue, 'Display available commands.')
            [CompletionResult]::new('comment', 'comment', [CompletionResultType]::ParameterValue, 'Display or add comments to a ticket.')
            [CompletionResult]::new('deselect', 'deselect', [CompletionResultType]::ParameterValue, 'Clear the implicitly selected ticket.')
            [CompletionResult]::new('label', 'label', [CompletionResultType]::ParameterValue, 'Display, add or remove labels to/from a ticket.')
            [CompletionResult]::new('ls', 'ls', [CompletionResultType]::ParameterValue, 'List tickets.')
            [CompletionResult]::new('ls-id', 'ls-id', [CompletionResultType]::ParameterValue, 'List ticket identifiers.')
            [CompletionResult]::new('ls-label', 'ls-label', [CompletionResultType]::ParameterValue, 'List valid labels.')
<<<<<<< HEAD:misc/powershell_completion/git-ticket
            [CompletionResult]::new('pull', 'pull', [CompletionResultType]::ParameterValue, 'Pull tickets update from a git remote.')
            [CompletionResult]::new('push', 'push', [CompletionResultType]::ParameterValue, 'Push tickets update to a git remote.')
            [CompletionResult]::new('review', 'review', [CompletionResultType]::ParameterValue, 'Review a ticket.')
            [CompletionResult]::new('select', 'select', [CompletionResultType]::ParameterValue, 'Select a ticket for implicit use in future commands.')
            [CompletionResult]::new('show', 'show', [CompletionResultType]::ParameterValue, 'Display the details of a ticket.')
            [CompletionResult]::new('status', 'status', [CompletionResultType]::ParameterValue, 'Display or change a ticket status.')
=======
            [CompletionResult]::new('pull', 'pull', [CompletionResultType]::ParameterValue, 'Pull bugs update from a git remote.')
            [CompletionResult]::new('push', 'push', [CompletionResultType]::ParameterValue, 'Push bugs update to a git remote.')
            [CompletionResult]::new('rm', 'rm', [CompletionResultType]::ParameterValue, 'Remove an existing bug.')
            [CompletionResult]::new('select', 'select', [CompletionResultType]::ParameterValue, 'Select a bug for implicit use in future commands.')
            [CompletionResult]::new('show', 'show', [CompletionResultType]::ParameterValue, 'Display the details of a bug.')
            [CompletionResult]::new('status', 'status', [CompletionResultType]::ParameterValue, 'Display or change a bug status.')
>>>>>>> remotes/upstream/master:misc/powershell_completion/git-bug
            [CompletionResult]::new('termui', 'termui', [CompletionResultType]::ParameterValue, 'Launch the terminal UI.')
            [CompletionResult]::new('title', 'title', [CompletionResultType]::ParameterValue, 'Display or change a title of a ticket.')
            [CompletionResult]::new('user', 'user', [CompletionResultType]::ParameterValue, 'Display or change the user identity.')
            [CompletionResult]::new('version', 'version', [CompletionResultType]::ParameterValue, 'Show git-ticket version information.')
            break
        }
        'git-ticket;add' {
            [CompletionResult]::new('-t', 't', [CompletionResultType]::ParameterName, 'Provide a title to describe the issue')
            [CompletionResult]::new('--title', 'title', [CompletionResultType]::ParameterName, 'Provide a title to describe the issue')
            [CompletionResult]::new('-m', 'm', [CompletionResultType]::ParameterName, 'Provide a message to describe the issue')
            [CompletionResult]::new('--message', 'message', [CompletionResultType]::ParameterName, 'Provide a message to describe the issue')
            [CompletionResult]::new('-F', 'F', [CompletionResultType]::ParameterName, 'Take the message from the given file. Use - to read the message from the standard input')
            [CompletionResult]::new('--file', 'file', [CompletionResultType]::ParameterName, 'Take the message from the given file. Use - to read the message from the standard input')
            break
        }
        'git-ticket;assign' {
            break
        }
        'git-ticket;commands' {
            [CompletionResult]::new('-p', 'p', [CompletionResultType]::ParameterName, 'Output the command description as well as Markdown compatible comment')
            [CompletionResult]::new('--pretty', 'pretty', [CompletionResultType]::ParameterName, 'Output the command description as well as Markdown compatible comment')
            break
        }
        'git-ticket;comment' {
            [CompletionResult]::new('add', 'add', [CompletionResultType]::ParameterValue, 'Add a new comment to a ticket.')
            break
        }
        'git-ticket;comment;add' {
            [CompletionResult]::new('-F', 'F', [CompletionResultType]::ParameterName, 'Take the message from the given file. Use - to read the message from the standard input')
            [CompletionResult]::new('--file', 'file', [CompletionResultType]::ParameterName, 'Take the message from the given file. Use - to read the message from the standard input')
            [CompletionResult]::new('-m', 'm', [CompletionResultType]::ParameterName, 'Provide the new message from the command line')
            [CompletionResult]::new('--message', 'message', [CompletionResultType]::ParameterName, 'Provide the new message from the command line')
            break
        }
        'git-ticket;deselect' {
            break
        }
        'git-ticket;label' {
            [CompletionResult]::new('add', 'add', [CompletionResultType]::ParameterValue, 'Add a label to a ticket.')
            [CompletionResult]::new('rm', 'rm', [CompletionResultType]::ParameterValue, 'Remove a label from a ticket.')
            break
        }
        'git-ticket;label;add' {
            break
        }
        'git-ticket;label;rm' {
            break
        }
        'git-ticket;ls' {
            [CompletionResult]::new('-s', 's', [CompletionResultType]::ParameterName, 'Filter by status. Valid values are [open,closed]')
            [CompletionResult]::new('--status', 'status', [CompletionResultType]::ParameterName, 'Filter by status. Valid values are [open,closed]')
            [CompletionResult]::new('-a', 'a', [CompletionResultType]::ParameterName, 'Filter by author')
            [CompletionResult]::new('--author', 'author', [CompletionResultType]::ParameterName, 'Filter by author')
            [CompletionResult]::new('-p', 'p', [CompletionResultType]::ParameterName, 'Filter by participant')
            [CompletionResult]::new('--participant', 'participant', [CompletionResultType]::ParameterName, 'Filter by participant')
            [CompletionResult]::new('-A', 'A', [CompletionResultType]::ParameterName, 'Filter by actor')
            [CompletionResult]::new('--actor', 'actor', [CompletionResultType]::ParameterName, 'Filter by actor')
            [CompletionResult]::new('-l', 'l', [CompletionResultType]::ParameterName, 'Filter by label')
            [CompletionResult]::new('--label', 'label', [CompletionResultType]::ParameterName, 'Filter by label')
            [CompletionResult]::new('-t', 't', [CompletionResultType]::ParameterName, 'Filter by title')
            [CompletionResult]::new('--title', 'title', [CompletionResultType]::ParameterName, 'Filter by title')
            [CompletionResult]::new('-n', 'n', [CompletionResultType]::ParameterName, 'Filter by absence of something. Valid values are [label]')
            [CompletionResult]::new('--no', 'no', [CompletionResultType]::ParameterName, 'Filter by absence of something. Valid values are [label]')
            [CompletionResult]::new('-b', 'b', [CompletionResultType]::ParameterName, 'Sort the results by a characteristic. Valid values are [id,creation,edit]')
            [CompletionResult]::new('--by', 'by', [CompletionResultType]::ParameterName, 'Sort the results by a characteristic. Valid values are [id,creation,edit]')
            [CompletionResult]::new('-d', 'd', [CompletionResultType]::ParameterName, 'Select the sorting direction. Valid values are [asc,desc]')
            [CompletionResult]::new('--direction', 'direction', [CompletionResultType]::ParameterName, 'Select the sorting direction. Valid values are [asc,desc]')
            [CompletionResult]::new('-f', 'f', [CompletionResultType]::ParameterName, 'Select the output formatting style. Valid values are [default,plain,json,org-mode]')
            [CompletionResult]::new('--format', 'format', [CompletionResultType]::ParameterName, 'Select the output formatting style. Valid values are [default,plain,json,org-mode]')
            break
        }
        'git-ticket;ls-id' {
            break
        }
        'git-ticket;ls-label' {
            break
        }
        'git-ticket;pull' {
            break
        }
        'git-ticket;push' {
            break
        }
        'git-ticket;review' {
            [CompletionResult]::new('fetch', 'fetch', [CompletionResultType]::ParameterValue, 'Fetch review data for a ticket.')
            break
        }
        'git-ticket;review;fetch' {
            break
        }
<<<<<<< HEAD:misc/powershell_completion/git-ticket
        'git-ticket;select' {
            break
        }
        'git-ticket;show' {
            [CompletionResult]::new('-f', 'f', [CompletionResultType]::ParameterName, 'Select field to display. Valid values are [assignee,author,authorEmail,checklists,createTime,humanId,id,labels,reviews,shortId,status,title,workflow,actors,participants]')
            [CompletionResult]::new('--field', 'field', [CompletionResultType]::ParameterName, 'Select field to display. Valid values are [assignee,author,authorEmail,checklists,createTime,humanId,id,labels,reviews,shortId,status,title,workflow,actors,participants]')
=======
        'git-bug;rm' {
            break
        }
        'git-bug;select' {
            break
        }
        'git-bug;show' {
            [CompletionResult]::new('--field', 'field', [CompletionResultType]::ParameterName, 'Select field to display. Valid values are [author,authorEmail,createTime,lastEdit,humanId,id,labels,shortId,status,title,actors,participants]')
            [CompletionResult]::new('-f', 'f', [CompletionResultType]::ParameterName, 'Select the output formatting style. Valid values are [default,json,org-mode]')
            [CompletionResult]::new('--format', 'format', [CompletionResultType]::ParameterName, 'Select the output formatting style. Valid values are [default,json,org-mode]')
>>>>>>> remotes/upstream/master:misc/powershell_completion/git-bug
            break
        }
        'git-ticket;status' {
            [CompletionResult]::new('accepted', 'accepted', [CompletionResultType]::ParameterValue, 'Ticket is set ACCEPTED.')
            [CompletionResult]::new('done', 'done', [CompletionResultType]::ParameterValue, 'Ticket is set DONE.')
            [CompletionResult]::new('inprogress', 'inprogress', [CompletionResultType]::ParameterValue, 'Ticket is set IN PROGRESS.')
            [CompletionResult]::new('inreview', 'inreview', [CompletionResultType]::ParameterValue, 'Ticket is set IN REVIEW.')
            [CompletionResult]::new('merged', 'merged', [CompletionResultType]::ParameterValue, 'Ticket is set MERGED.')
            [CompletionResult]::new('proposed', 'proposed', [CompletionResultType]::ParameterValue, 'Ticket is set PROPOSED.')
            [CompletionResult]::new('reviewed', 'reviewed', [CompletionResultType]::ParameterValue, 'Ticket is set REVIEWED.')
            [CompletionResult]::new('vetted', 'vetted', [CompletionResultType]::ParameterValue, 'Ticket is set VETTED.')
            break
        }
        'git-ticket;status;accepted' {
            break
        }
        'git-ticket;status;done' {
            break
        }
        'git-ticket;status;inprogress' {
            break
        }
        'git-ticket;status;inreview' {
            break
        }
        'git-ticket;status;merged' {
            break
        }
        'git-ticket;status;proposed' {
            break
        }
        'git-ticket;status;reviewed' {
            break
        }
        'git-ticket;status;vetted' {
            break
        }
        'git-ticket;termui' {
            break
        }
        'git-ticket;title' {
            [CompletionResult]::new('edit', 'edit', [CompletionResultType]::ParameterValue, 'Edit a title of a ticket.')
            break
        }
        'git-ticket;title;edit' {
            [CompletionResult]::new('-t', 't', [CompletionResultType]::ParameterName, 'Provide a title to describe the issue')
            [CompletionResult]::new('--title', 'title', [CompletionResultType]::ParameterName, 'Provide a title to describe the issue')
            break
        }
        'git-ticket;user' {
            [CompletionResult]::new('-f', 'f', [CompletionResultType]::ParameterName, 'Select field to display. Valid values are [email,humanId,id,lastModification,lastModificationLamport,login,metadata,name]')
            [CompletionResult]::new('--field', 'field', [CompletionResultType]::ParameterName, 'Select field to display. Valid values are [email,humanId,id,lastModification,lastModificationLamport,login,metadata,name]')
            [CompletionResult]::new('adopt', 'adopt', [CompletionResultType]::ParameterValue, 'Adopt an existing identity as your own.')
            [CompletionResult]::new('create', 'create', [CompletionResultType]::ParameterValue, 'Create a new identity.')
            [CompletionResult]::new('key', 'key', [CompletionResultType]::ParameterValue, 'Display, add or remove keys to/from a user.')
            [CompletionResult]::new('ls', 'ls', [CompletionResultType]::ParameterValue, 'List identities.')
            break
        }
        'git-ticket;user;adopt' {
            break
        }
        'git-ticket;user;create' {
            break
        }
        'git-ticket;user;key' {
            [CompletionResult]::new('add', 'add', [CompletionResultType]::ParameterValue, 'Add a PGP key from a user.')
            [CompletionResult]::new('rm', 'rm', [CompletionResultType]::ParameterValue, 'Remove a PGP key from the adopted or the specified user.')
            break
        }
        'git-ticket;user;key;add' {
            [CompletionResult]::new('-F', 'F', [CompletionResultType]::ParameterName, 'Take the armored PGP public key from the given file. Use - to read the message from the standard input')
            [CompletionResult]::new('--file', 'file', [CompletionResultType]::ParameterName, 'Take the armored PGP public key from the given file. Use - to read the message from the standard input')
            [CompletionResult]::new('-k', 'k', [CompletionResultType]::ParameterName, 'Provide the armored PGP public key from the command line')
            [CompletionResult]::new('--key', 'key', [CompletionResultType]::ParameterName, 'Provide the armored PGP public key from the command line')
            break
        }
        'git-ticket;user;key;rm' {
            break
        }
<<<<<<< HEAD:misc/powershell_completion/git-ticket
        'git-ticket;user;ls' {
=======
        'git-bug;user;ls' {
            [CompletionResult]::new('-f', 'f', [CompletionResultType]::ParameterName, 'Select the output formatting style. Valid values are [default,json]')
            [CompletionResult]::new('--format', 'format', [CompletionResultType]::ParameterName, 'Select the output formatting style. Valid values are [default,json]')
>>>>>>> remotes/upstream/master:misc/powershell_completion/git-bug
            break
        }
        'git-ticket;version' {
            [CompletionResult]::new('-n', 'n', [CompletionResultType]::ParameterName, 'Only show the version number')
            [CompletionResult]::new('--number', 'number', [CompletionResultType]::ParameterName, 'Only show the version number')
            [CompletionResult]::new('-c', 'c', [CompletionResultType]::ParameterName, 'Only show the commit hash')
            [CompletionResult]::new('--commit', 'commit', [CompletionResultType]::ParameterName, 'Only show the commit hash')
            [CompletionResult]::new('-a', 'a', [CompletionResultType]::ParameterName, 'Show all version information')
            [CompletionResult]::new('--all', 'all', [CompletionResultType]::ParameterName, 'Show all version information')
            break
        }
<<<<<<< HEAD:misc/powershell_completion/git-ticket
=======
        'git-bug;webui' {
            [CompletionResult]::new('--open', 'open', [CompletionResultType]::ParameterName, 'Automatically open the web UI in the default browser')
            [CompletionResult]::new('--no-open', 'no-open', [CompletionResultType]::ParameterName, 'Prevent the automatic opening of the web UI in the default browser')
            [CompletionResult]::new('-p', 'p', [CompletionResultType]::ParameterName, 'Port to listen to (default is random)')
            [CompletionResult]::new('--port', 'port', [CompletionResultType]::ParameterName, 'Port to listen to (default is random)')
            [CompletionResult]::new('--read-only', 'read-only', [CompletionResultType]::ParameterName, 'Whether to run the web UI in read-only mode')
            break
        }
>>>>>>> remotes/upstream/master:misc/powershell_completion/git-bug
    })
    $completions.Where{ $_.CompletionText -like "$wordToComplete*" } |
        Sort-Object -Property ListItemText
}